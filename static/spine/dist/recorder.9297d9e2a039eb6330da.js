(()=>{"use strict";var e,t={775:(e,t,n)=>{var i,s=n(244);class a{dom;parent;runtime;constructor(e,t){this.parent="string"==typeof e?document.getElementById(e):e,this.parent?.appendChild(this.setupDom()),this.runtime=t}getElementById(e,t){return this.findWithId(this.dom,t)[0]}findWithId(e,t){let n=new Array,i=(e,t,n)=>{for(var s=0;s<e.children.length;s++){let a=e.children[s];a.id===t&&n.push(a),i(a,t,n)}};return i(e,t,n),n}findWithClass(e,t){let n=new Array,i=(e,t,n)=>{for(var s=0;s<e.children.length;s++){let a=e.children[s];a.classList.contains(t)&&n.push(a),i(a,t,n)}};return i(e,t,n),n}createElement(e){let t=document.createElement("div");return t.innerHTML=e,t.children[0]}setupDom(){let e=this.dom=this.createElement('\n\t\t\t\t<div class="save_canvas_container">\n                    <label>File Format</label>\n                    <select id="file_format_select_id">\n                    </select>\n                    <br />\n\n                    <label>Output Filename</label>\n                    <input id="output_filename" type="text" placeholder="video filename" defaultValue="video.mp4"  size=50 />\n                    <br />\n\n                    <div>\n                        <label>Record Mode</label>\n                        <select id="record_mode_select_id">\n                            <option value="manual" selected>Manual</option>\n                            <option value="actor">Choose Actor</option>\n                            <option value="duration">Duration</option>\n                        </select>\n\n                        <div class="record_mode_manual">\n                            <button class="record-button">Record</button>\n                        </div>\n\n                        <div class="record_mode_actor hidden">\n                            <label>Choose Actor</label>\n                            <select id="actor_select_id">\n                            </select>\n                            <button class="save-button-actor">Save</button>\n                        </div>\n\n                        <div class="record_mode_duration hidden">\n                            <label>Record Duration (seconds)</label>\n                            <input id="record_duration_id" type="number" placeholder="start time" defaultValue="2" value="2" step="0.001"/>\n                            <button class="save-button-duration">Save</button>\n                        </div>\n\n                        <br />\n                        <div>Status: <span id="record_status"></span></div>\n                    </div>\n                    \n                    <div class="output_container hidden">\n                        <p>Output files</p>\n                    </div>\n                </div>\n\t\t\t');return document.body.appendChild(this.dom),this.setupData(this.dom),this.addListeners(this.dom),e}setupData(e){let t=this.getElementById(e,"file_format_select_id");(function(...e){e.length||e.push("video","audio");const t=["webm","ogg","mp3","mp4","x-matroska","3gpp","3gpp2","3gp2","quicktime","mpeg","aac","flac","x-flac","wave","wav","x-wav","x-pn-wav","not-supported"],n=["vp9","vp9.0","vp8","vp8.0","avc1","av1","h265","h.265","h264","h.264","opus","vorbis","pcm","aac","mpeg","mp4a","rtx","red","ulpfec","g722","pcmu","pcma","cn","telephone-event","not-supported"];return[...new Set(t.flatMap((t=>e.flatMap((e=>[`${e}/${t}`]))))),...new Set(t.flatMap((t=>n.flatMap((n=>e.flatMap((e=>[`${e}/${t};codecs=${n}`]))))))),...new Set(t.flatMap((t=>n.flatMap((i=>n.flatMap((n=>e.flatMap((e=>[`${e}/${t};codecs="${i}, ${n}"`])))))))))].filter((e=>MediaRecorder.isTypeSupported(e)))})("video").forEach((e=>{t.appendChild(this.createElement(`<option value="${e}">${e}</option>`))})),this.getElementById(e,"output_filename").value=`vid_${crypto.randomUUID()}.mp4`}setStatus(e,t){this.getElementById(this.dom,"record_status").innerText=e,t&&setTimeout((()=>{this.getElementById(this.dom,"record_status").innerText=""}),5e3)}getOutputFilename(){return this.getElementById(this.dom,"output_filename").value}recordManualStart(){let e=null;return t=>{console.log("Record button");let n=this.dom;if(null==e){console.log("start manual recording"),t.target.innerText="Stop";let i=this.getOutputFilename(),s=this.getElementById(n,"file_format_select_id").value;e=new d(i,s,this.saveBlob(),this.setStatus.bind(this));let a=this.runtime.spinePlayer.registerRenderCallback(e.renderCallback.bind(e));e.removalFn=a}else console.log("Stop manual recording"),t.target.innerText="Record",e.recorder.stop(),e.removalFn(),e=null}}addListeners(e){this.getElementById(e,"record_mode_select_id").addEventListener("change",(t=>{let n=t.target.value,i=this.findWithClass(e,"record_mode_actor")[0],s=this.findWithClass(e,"record_mode_duration")[0],a=this.findWithClass(e,"record_mode_manual")[0];"actor"===n?(i.classList.remove("hidden"),s.classList.add("hidden"),a.classList.add("hidden"),i.querySelector("select").innerHTML="",this.runtime.spinePlayer.getActorNames().forEach((e=>{let t=encodeURIComponent(e),n=this.createElement(`<option value="${t}"></option>`);n.innerText=`${t}`,i.querySelector("select").appendChild(n)}))):"duration"===n?(i.classList.add("hidden"),s.classList.remove("hidden"),a.classList.add("hidden")):"manual"===n&&(i.classList.add("hidden"),s.classList.add("hidden"),a.classList.remove("hidden"))}).bind(this)),this.findWithClass(e,"record-button")[0].addEventListener("click",this.recordManualStart()),this.findWithClass(e,"save-button-actor")[0].addEventListener("click",(t=>{let n=this.getOutputFilename(),i=this.getElementById(e,"file_format_select_id").value,s=this.getElementById(e,"actor_select_id").value,a=decodeURIComponent(s),r=this.runtime.spinePlayer.getActor(a);if(!r||void 0===r)return void console.log("Actor not found");const o=new l(n,i,this.saveBlob(),this.setStatus.bind(this));o.setup(r);let d=this.runtime.spinePlayer.registerRenderCallback(o.renderCallback.bind(o));o.removalFn=d})),this.findWithClass(e,"save-button-duration")[0].addEventListener("click",(t=>{let n=this.getOutputFilename(),i=this.getElementById(e,"file_format_select_id").value,s=this.getElementById(e,"record_duration_id").valueAsNumber;const a=new o(n,i,this.saveBlob(),this.setStatus.bind(this));a.setup(s);let r=this.runtime.spinePlayer.registerRenderCallback(a.renderCallback.bind(a));a.removalFn=r}))}saveBlob(){const e=document.createElement("a");let t=this.findWithClass(this.dom,"output_container")[0];return t.appendChild(e),function(n,i){const s=window.URL.createObjectURL(n);e.href=s,e.download=i,e.click(),setTimeout((()=>{t.removeChild(e)}))}}}class r{removalFn;saveBlobFn=null;setStatusFn=null;outputFilename="";mimeType="video/mp4;codec=vp9";chunks=[];recorder;frameCount=0;constructor(e,t,n,i){this.removalFn=null,this.saveBlobFn=n,this.setStatusFn=i,this.outputFilename=e,this.mimeType=t}startRecording(e){const t=this.mimeType;if(MediaRecorder.isTypeSupported(t)){this.setStatusFn&&this.setStatusFn("Recording");try{const n=e.canvas,i=[],s=n.captureStream(),a=new MediaRecorder(s,{mimeType:t});this.chunks=i,this.recorder=a,a.ondataavailable=e=>i.push(e.data),a.onstop=e=>{this.saveBlobFn(new Blob(i,{type:t}),this.outputFilename),this.setStatusFn&&this.setStatusFn("Finished recording",!0)},a.onerror=e=>console.log("MediaRecorder error",e),a.start()}catch(e){console.log("Failed to start recording",e)}}else console.log("Failed to start recording. unsupported file format",t)}renderCallback(e){throw new Error("Method not implemented.")}}class o extends r{durationMs=0;startTimeMsec=0;setup(e){this.durationMs=1e3*e}renderCallback(e){if(0==this.frameCount&&(console.log("Start recording video"),this.startRecording(e),this.startTimeMsec=(new Date).getTime()),this.frameCount+=1,(new Date).getTime()-this.startTimeMsec>=this.durationMs)return console.log("Finished recording video"),this.removalFn(),void this.recorder.stop()}}!function(e){e[e.FIRST_RENDER_CALL=0]="FIRST_RENDER_CALL",e[e.WAIT_FIRST_COMPLETE=1]="WAIT_FIRST_COMPLETE",e[e.WAIT_SECOND_COMPLETE=2]="WAIT_SECOND_COMPLETE",e[e.WAIT_LAST_FRAME=3]="WAIT_LAST_FRAME"}(i||(i={}));class l extends r{actor;state=i.FIRST_RENDER_CALL;animationListener=null;setup(e){this.actor=e,this.state=i.FIRST_RENDER_CALL,this.animationListener=null}renderCallback(e){if(this.state==i.FIRST_RENDER_CALL)return this.animationListener={complete:t=>{this.state==i.WAIT_FIRST_COMPLETE?(console.log("start recording"),this.state=i.WAIT_SECOND_COMPLETE,this.startRecording(e)):this.state==i.WAIT_SECOND_COMPLETE&&(this.state=i.WAIT_LAST_FRAME)},event:(e,t)=>{},interrupt:e=>{},dispose:e=>{},start:e=>{},end:e=>{}},this.actor.animationState.addListener(this.animationListener),this.frameCount+=1,void(this.state=i.WAIT_FIRST_COMPLETE);this.state==i.WAIT_SECOND_COMPLETE?this.frameCount+=1:this.state==i.WAIT_LAST_FRAME&&(console.log("Done with recording after ",this.frameCount," frames"),this.actor.animationState.removeListener(this.animationListener),this.removalFn(),this.recorder.stop())}}class d extends r{renderCallback(e){0==this.frameCount&&this.startRecording(e),this.frameCount+=1}}var c=n(169);window.addEventListener("load",(()=>{const e=window.location.search,t=new URLSearchParams(e);let n=t.get("channelName");n&&n.match(/^[a-zA-Z0-9_-]+$/)||(n="");const i=(0,c.T)(t);window.SpineRuntime=new s.v(n,i),window.CanvasRecorder=new a("custom_container",window.SpineRuntime)}))}},n={};function i(e){var s=n[e];if(void 0!==s)return s.exports;var a=n[e]={exports:{}};return t[e](a,a.exports,i),a.exports}i.m=t,e=[],i.O=(t,n,s,a)=>{if(!n){var r=1/0;for(c=0;c<e.length;c++){for(var[n,s,a]=e[c],o=!0,l=0;l<n.length;l++)(!1&a||r>=a)&&Object.keys(i.O).every((e=>i.O[e](n[l])))?n.splice(l--,1):(o=!1,a<r&&(r=a));if(o){e.splice(c--,1);var d=s();void 0!==d&&(t=d)}}return t}a=a||0;for(var c=e.length;c>0&&e[c-1][2]>a;c--)e[c]=e[c-1];e[c]=[n,s,a]},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={777:0};i.O.j=t=>0===e[t];var t=(t,n)=>{var s,a,[r,o,l]=n,d=0;if(r.some((t=>0!==e[t]))){for(s in o)i.o(o,s)&&(i.m[s]=o[s]);if(l)var c=l(i)}for(t&&t(n);d<r.length;d++)a=r[d],i.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return i.O(c)},n=self.webpackChunkspine=self.webpackChunkspine||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var s=i.O(void 0,[682],(()=>i(775)));s=i.O(s)})();
//# sourceMappingURL=recorder.9297d9e2a039eb6330da.js.map