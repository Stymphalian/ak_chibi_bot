
CREATE TABLE IF NOT EXISTS Users (
	user_id SERIAL PRIMARY KEY,
	username VARCHAR(128) NOT NULL UNIQUE,
	user_display_name VARCHAR(128) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Rooms (
	room_id SERIAL PRIMARY KEY,
	channel_name VARCHAR(128) NOT NULL UNIQUE,
    owner_id INT NOT NULL REFERENCES Users(user_id),
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Chatters (
	chatter_id SERIAL PRIMARY KEY,
	room_id INT NOT NULL REFERENCES Rooms(room_id),
	user_id INT NOT NULL REFERENCES Users(user_id),
	operator_id VARCHAR(128),
	last_chat_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER users_update
BEFORE UPDATE ON Users
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at();

CREATE TRIGGER rooms_update
BEFORE UPDATE ON Rooms
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at();

CREATE TRIGGER chatters_update
BEFORE UPDATE ON Chatters
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at();



