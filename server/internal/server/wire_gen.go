// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/Stymphalian/ak_chibi_bot/server/internal/akdb"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/api"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/auth"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/login"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/misc"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/operator"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/room"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/twitch_api"
	"github.com/Stymphalian/ak_chibi_bot/server/internal/users"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeMainServer() (*MainServer, error) {
	commandLineArgs, err := misc.ProvideCommandLineArgs()
	if err != nil {
		return nil, err
	}
	botConfig := misc.ProvideBotConfig(commandLineArgs)
	imageAssetDirString := misc.ProvideImageAssetDirString(commandLineArgs)
	assetService, err := operator.NewAssetService(imageAssetDirString)
	if err != nil {
		return nil, err
	}
	datbaseConn, err := akdb.ProvideDatabaseConn()
	if err != nil {
		return nil, err
	}
	roomRepositoryPsql := room.NewRoomRepositoryPsql(datbaseConn)
	userRepositoryPsql := users.NewUserRepositoryPsql(datbaseConn)
	chatterRepositoryPsql := users.NewChatterRepositoryPsql(datbaseConn)
	authRepositoryPsql := auth.NewAuthRepositoryPsql(datbaseConn)
	twitchApiClient := twitch_api.ProvideTwitchApiClient(botConfig)
	authService, err := auth.ProvideAuthService(botConfig, twitchApiClient, userRepositoryPsql, datbaseConn)
	if err != nil {
		return nil, err
	}
	staticAssetDirString := misc.ProvideStaticAssetDirString(commandLineArgs)
	loginServer, err := login.NewLoginServer(staticAssetDirString, authService, userRepositoryPsql)
	if err != nil {
		return nil, err
	}
	userPreferencesRepositoryPsql := users.NewUserPreferencesRepositoryPsql(datbaseConn)
	roomsManager := room.NewRoomsManager(assetService, roomRepositoryPsql, userRepositoryPsql, userPreferencesRepositoryPsql, chatterRepositoryPsql, twitchApiClient, botConfig)
	operatorService := operator.NewDefaultOperatorService(assetService)
	apiServer := api.NewApiServer(roomsManager, authService, roomRepositoryPsql, userRepositoryPsql, userPreferencesRepositoryPsql, operatorService, botConfig)
	mainServer := NewMainServer(commandLineArgs, botConfig, assetService, roomRepositoryPsql, userRepositoryPsql, chatterRepositoryPsql, authRepositoryPsql, twitchApiClient, authService, loginServer, roomsManager, apiServer, datbaseConn)
	return mainServer, nil
}
