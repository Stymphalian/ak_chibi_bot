# docker compose -f compose.DEV.yaml up -d
# docker compose -f compose.DEV.yaml down
# docker compose -f compose.DEV.yaml logs
name: ak-services
services:
  bot:
    build:
      context: ./
      dockerfile: ./Dockerfile
      target: development
    ports:
      - "8080:8080"
    environment:
      - DATABASE_USER=web_user
      - DATABASE_DB=akdb
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_PASSWORD_FILE=/run/secrets/web-user-password.txt
    restart: on-failure:3
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      text_chat:
        condition: service_started
    secrets:
      - web-user-password.txt
    volumes:
      - ./:/app  # Mounting to /app so that the 'air' CLI tool hot reload
    stdin_open: true
    tty: true

  migrations:
    image: migrate/migrate:4
    volumes:
      - ./db/migrations:/migrations
    depends_on:
      db:
        condition: service_healthy
    command:    [
      "-database", "postgres://${MIGRATE_DB_USER}:${MIGRATE_DB_PASSWORD}@db:5432/akdb", 
      "-path", "./migrations", 
      "up" 
    ]
    env_file: .env

  db:
    build:
      context: ./db
      dockerfile: ./Dockerfile
      target: development
    restart: always
    user: postgres
    shm_size: 256mb
    secrets:
      - postgres-password.txt
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=akdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password.txt
    ports:
      - "55443:5432"
    expose:
      - 55443
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      start_period: 5s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 5

  ## A server which allows us to connect to a text-based chat
  ## server via websocket when interacting with the bot server.
  ## This allows for testing the bot without needing to directly connect
  ## via twitch chat. ONLY AVAILABLE IN DEVELOPMENT
  text_chat:
    build:
      context: ./
      dockerfile: ./server/tools/text_chat/Dockerfile
      target: development
    ports:
      - "8090:8090"
    volumes:
      - ./:/app  # Mounting to /app so that the 'air' CLI tool hot reload

volumes:
  db-data:

secrets:
  postgres-password.txt:
    file: secrets/postgres-password.txt
  web-user-password.txt:
    file: secrets/web-user-password.txt
